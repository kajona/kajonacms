<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================

     Kajona Head Build
     Buildfile to perform additional actions such as phpunit-tests generation, ...
     Called by the buildserver, so change with care :)
     This file is created for Jenkins but may be called from the CLI, too.

     This build-file may be migrated to phing, feel free to start the migration


     Author: sidler
     $Id$

     ====================================================================== -->
<project name="Kajona Head Build" default="buildSqliteFast" basedir=".">

    <description>
        Buildfile to run common tasks.
        This buildfile is meant to be run on a SVN development snapshot, so NOT on a real project.
        The buildfile expects all modules to be checked out located at /core.
    </description>

    <!--
         CONFIG VALUES BELOW
     -->

    <!-- setting windows specific properties-->
    <condition property="script-suffix" value=".bat" else="">
        <os family="windows" />
    </condition>
    <condition property="script-suffix-cmd" value=".cmd" else="">
        <os family="windows" />
    </condition>

    <!-- target dir for the sources from the svn repo -->
    <property name="sourcesPath"  value="/../../" />
    <!-- target dir to install the system to. this folder is also referenced in the phpunit config file! -->
    <property name="projectPath"  value="/buildproject" />
    <!-- artifacts such as logs and reports will be stored here -->
    <property name="buildPath"    value="/build" />
    <!-- js tests and node tasks -->
    <property name="jsPath"    value="/jstests" />
    <!-- generated zips will be placed here (full, light) -->
    <property name="packagesPath" value="/packages" />
    <!-- temp-folder, required to build the packages -->
    <property name="tempPath"     value="/temp/kajona" />
    <!-- composer-folder, required for composer dependcy management -->
    <property name="composerPath"     value="/composer" />
    <!-- path to the composer binaries -->
    <property name="composerBinariesPath" value="${basedir}${buildPath}/composerbuild/vendor/bin" />



    <!-- path to composer -->
    <property name="path.composer"  value="composer${script-suffix}" />
    <!-- path to node -->
    <property name="path.node"      value="node" />
    <!-- path to npm -->
    <property name="path.npm"       value="npm${script-suffix-cmd}" />
    <!-- path to phpunit -->
    <property name="path.phpunit"   value="${composerBinariesPath}/phpunit${script-suffix}" />
    <!-- path to phpcs -->
    <property name="path.phpcs"     value="${composerBinariesPath}/phpcs${script-suffix}" />
    <!-- path to phpmd -->
    <property name="path.phpmd"     value="${composerBinariesPath}/phpmd${script-suffix}" />
    <!-- path to phpcpd -->
    <property name="path.phpcpd"    value="${composerBinariesPath}/phpcpd${script-suffix}" />
    <!-- path to pdepend -->
    <property name="path.pdepend"   value="${composerBinariesPath}/pdepend${script-suffix}" />
    <!-- path to php -->
    <property name="path.php"       value="php" />
    <!-- path to phploc -->
    <property name="path.phploc"    value="${composerBinariesPath}/phploc${script-suffix}" />
    <!-- path to phpcb -->
    <property name="path.phpcb"     value="${composerBinariesPath}/phpcb${script-suffix}" />
    <!-- path to phpdox -->
    <property name="path.phpdox"     value="${composerBinariesPath}/phpdox${script-suffix}" />


    <!--
             No need to change anything below!
     -->


    <!-- internal initialization -->
    <target name="init" depends="cleanFilesystem,installComposerBuildDependencies,installNpmBuildDependencies">
        <tstamp />
    </target>

    <target name="buildSqliteFast" depends="
		    								init,
					    					buildProject, installProjectSqlite,
					    					lint,phpunitFast,jasmine,
					    					buildAllInOneZip" />


    <target name="buildSqliteFull" depends="
		    								init,
					    					buildProject, installProjectSqlite,
					    					lint,phpunit,jasmine,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,
					    					buildAllInOneZip, buildFullZip" />

    <target name="buildMysql" depends="
		    								init,
					    					buildProject, installProjectMysql,
					    					phpunitFast,jasmine" />

    <target name="buildOracle" depends="
		    								init,
					    					buildProject, installProjectOracle,
					    					phpunitFast,jasmine" />

    <target name="buildPostgres" depends="
		    								init,
					    					buildProject, installProjectPostgres,
					    					phpunitFast,jasmine" />

    <target name="buildAllInOneZipOnly" depends="
                                            init,
                                            buildProject, buildAllInOneZip" />



    <!-- installs all composer dependencies required for the build itself, so mainly external tools -->
    <target name="installComposerBuildDependencies" >
        <echo>Copy composer.json and composer.lock to ${basedir}${tempPath}</echo>
        <copy todir="${basedir}${buildPath}/composerbuild" overwrite="true"  includeEmptyDirs="true" >
            <fileset id="composer.dirs" dir="${basedir}${composerPath}">
                <include name="composer.json"/>
                <include name="composer.lock"/>
            </fileset>
        </copy>

        <echo>Execute composer</echo>
        <exec dir="${basedir}${buildPath}/composerbuild" executable="${path.composer}" failonerror="on" >
            <arg line=" install"/>
            <arg line=" --no-dev"/>
            <arg line=" --quiet"/>
        </exec>
    </target>

    <!-- installs all node dependencies -->
    <target name="installNpmBuildDependencies" >
        <echo>Execute npm</echo>
        <exec dir="${basedir}${jsPath}" executable="${path.npm}" failonerror="on">
            <arg line=" install"/>
        </exec>
    </target>


    <!-- executes javascript protractor tests -->
    <target name="protractorSetup" depends="installNpmBuildDependencies">
        <!-- deletes all files from the tmp folder -->
        <antcall target="setupPackageFolders" />

        <!-- copy all files to the temp folder -->
        <copy todir="${basedir}${tempPath}" overwrite="true" includeEmptyDirs="true" >
            <fileset id="sources.dirs" dir="${basedir}${sourcesPath}">
                <exclude name=".git"/>
                <include name="core*/module_*/*/**"/>
                <include name="core*/template_*/*/**"/>
                <include name="core*/_debugging/*/**"/>
                <include name="core*/*.php"/>
                <include name="core*/*.htaccess"/>
                <include name="core/_buildfiles/jstests/selenium/**"/><!-- contains the page objects-->
            </fileset>
        </copy>

        <!-- Extract phar files -->
        <copy file="${basedir}/extractPhar.php" tofile="${basedir}${tempPath}/extractPhar.php" />

        <!-- remove modules which are not included in the package config -->
        <exec executable="${path.php}" dir="${basedir}" failonerror="on" >
            <arg line="cleanCore.php ${tempPath}"/>
        </exec>

        <antcall target="buildPackageHelperSelenium" />

        <!-- Modify .htaccess file-->
        <echo file="${basedir}${tempPath}/.htaccess" append="true">
            Allow from all
        </echo>

    </target>

    <target name="protractorExecute" depends="installNpmBuildDependencies">

        <!-- Start webdriver-->
        <exec dir="${basedir}${jsPath}" executable="${path.node}" failonerror="on">
            <arg line="./node_modules/protractor/bin/webdriver-manager update"/>
        </exec>
        <exec dir="${basedir}${jsPath}" executable="${path.node}" spawn="true">
            <arg line="./node_modules/protractor/bin/webdriver-manager start"/>
        </exec>

        <!-- wait so that the selenium and webserver are ready -->
        <sleep seconds="4" />

        <!-- run selenium tests -->
        <echo> Run selenium tests </echo>
        <exec dir="${basedir}${jsPath}" executable="${path.node}" failonerror="on">
            <arg line="./node_modules/protractor/bin/protractor e2e/conf.js"/>
        </exec>

        <!-- Stop webdriver-->
        <exec dir="${basedir}${jsPath}" executable="${path.node}" spawn="true">
            <arg line="./node_modules/protractor/bin/webdriver-manager shutdown"/>
        </exec>

    </target>

    <target name="protractor" depends="protractorSetup">
        <antcall target="protractorExecute" />
    </target>

    <target name="protractorPhar" depends="protractorSetup">
        <sleep seconds="10"/>
        <antcall target="modulePharHelper" />

        <!-- call extract phar -->
        <exec dir="${basedir}${tempPath}" executable="${path.php}">
            <arg line="extractPhar.php"/>
        </exec>

        <antcall target="protractorExecute" />
    </target>

    <!-- removes existing folders and creates them again -->
    <target name="cleanFilesystem">
        <delete dir="${basedir}${packagesPath}"/>
        <mkdir  dir="${basedir}${packagesPath}"/>

        <delete dir="${basedir}${tempPath}"/>
        <delete dir="${basedir}${tempPath}/../" />
        <mkdir  dir="${basedir}${tempPath}"/>

        <delete dir="${basedir}${projectPath}"/>
        <mkdir  dir="${basedir}${projectPath}"/>

        <delete dir="${basedir}${buildPath}"/>
        <mkdir  dir="${basedir}${buildPath}"/>
        <mkdir  dir="${basedir}${buildPath}/api"/>
        <mkdir  dir="${basedir}${buildPath}/logs"/>
        <mkdir  dir="${basedir}${buildPath}/coverage"/>
        <!--<mkdir  dir="${basedir}${buildPath}/code-browser"/>-->
        <mkdir  dir="${basedir}${buildPath}/pdepend"/>
        <!--<mkdir  dir="${basedir}${buildPath}/phpdox"/>-->
        <mkdir  dir="${basedir}${buildPath}/composerbuild"/>

    </target>


    <!-- builds the project, aka creates a project out of the sources -->
    <target name="buildProject">
        <copy todir="${basedir}${projectPath}" overwrite="true"  includeEmptyDirs="true" >
            <fileset id="sources.dirs" dir="${basedir}${sourcesPath}">
                <exclude name=".git"/>
                <exclude name="core/_buildfiles/"/>
                <include name="core*/module_*/*/**"/>
                <include name="core*/template_*/*/**"/>
                <include name="core*/_debugging/*/**"/>
                <include name="core*/*.php"/>
                <include name="core*/*.htaccess"/>
            </fileset>
        </copy>
    </target>

    <!-- creates the full-zip including all modules and elements -->
    <target name="buildFullZip" depends="init" >
        <antcall target="setupPackageFolders" />
        <copy todir="${basedir}${tempPath}" overwrite="true"  includeEmptyDirs="true" >
            <fileset id="sources.dirs" dir="${basedir}${sourcesPath}">
                <exclude name=".git"/>
                <exclude name="core/_buildfiles/"/>
                <exclude name="core*/module_pchart/" />
                <exclude name="core*/module_flotchart/" />

                <include name="core*/module_*/*/**"/>
                <include name="core*/template_*/*/**"/>
                <include name="core*/*.php"/>
                <include name="core*/*.htaccess"/>
            </fileset>
        </copy>

        <antcall target="buildPackageHelper" />
        <antcall target="modulePharHelper" />

        <zip destfile="${basedir}${packagesPath}/kajona_v5_full_${DSTAMP}-${TSTAMP}.zip">
            <fileset dir="${basedir}${tempPath}/../" />
        </zip>
    </target>




    <!-- creates the full-zip including all modules and elements -->
    <target name="buildAllInOneZip" depends="init" >
        <antcall target="setupPackageFolders" />
        <copy todir="${basedir}${tempPath}" overwrite="true"  includeEmptyDirs="true" >
            <fileset id="sources.dirs" dir="${basedir}${sourcesPath}">
                <exclude name=".git"/>

                <include name="core*/module_dashboard/**"/>
                <include name="core*/module_eventmanager/**"/>
                <include name="core*/module_faqs/**"/>
                <include name="core*/module_formular/**"/>
                <include name="core*/module_guestbook/**"/>
                <include name="core*/module_installer/**"/>
                <include name="core*/module_jqplot/**"/>
                <include name="core*/module_languageswitch/**"/>
                <include name="core*/module_mediamanager/**"/>
                <include name="core*/module_navigation/**"/>
                <include name="core*/module_news/**"/>
                <include name="core*/module_packagemanager/**"/>
                <include name="core*/module_pages/**"/>
                <include name="core*/module_postacomment/**"/>
                <include name="core*/module_rating/**"/>
                <include name="core*/module_rssfeed/**"/>
                <include name="core*/module_samplecontent/**"/>
                <include name="core*/module_search/**"/>
                <include name="core*/module_stats/**"/>
                <include name="core*/module_system/**"/>
                <include name="core*/module_tags/**"/>
                <include name="core*/module_v4skin/**"/>
                <include name="core*/module_votings/**"/>
                <include name="core*/*.php"/>
                <include name="core*/*.htaccess"/>
            </fileset>
        </copy>

        <antcall target="buildPackageHelper" />
        <antcall target="modulePharHelper" />

        <zip destfile="${basedir}${packagesPath}/kajona_v5_allinone_${DSTAMP}-${TSTAMP}.zip">
            <fileset dir="${basedir}${tempPath}/../" />
        </zip>
    </target>


    <target name="modulePharHelper" description="generates phar files out of the current module structure">
        <exec executable="php" dir="${basedir}${tempPath}/core"  failonerror="on" >
            <arg line="-f generate_phar.php removesource=true"/>
        </exec>

        <delete includeemptydirs="true">
            <fileset dir="${basedir}${tempPath}" includes="**/core/generate_phar.php"/>
        </delete>

    </target>

    <!-- deprecated -->
    <target name="modulePackagesZipHelper" depends="init" description="call this task before using the shellscript in order to generate module-zips">
        <copy todir="${basedir}${tempPath}" overwrite="true"  includeEmptyDirs="true"  >
            <fileset id="sources.dirs" dir="${basedir}${sourcesPath}">
                <exclude name=".svn"/>
                <exclude name=".git"/>
                <include name="core*/module_*/**"/>
                <include name="core*/template_*/**"/>
                <include name="core*/_debugging/**"/>
                <include name="core*/*.php"/>
            </fileset>
        </copy>

        <antcall target="buildPackageHelper" />

    </target>

    <target name="buildPackageHelper" description="triggers the project setup and the compilation / compression of css / js files">
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f buildProject.php ${tempPath} onlySetup"/>
        </exec>
        <antcall target="compileLess" />
        <antcall target="compressCss" />
        <antcall target="compressJs" />
        <antcall target="cleanZipContent" />
    </target>

    <target name="buildPackageHelperProject" description="triggers the project setup and the compilation / compression of css / js files">
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f buildProject.php ${tempPath} onlySetup"/>
        </exec>
        <antcall target="compileLess" />
        <antcall target="compressCss" />
        <antcall target="compressJs" />
        <antcall target="cleanZipContent" />
    </target>

    <target name="buildPackageHelperSelenium" description="triggers the project setup and the compilation / compression of css / js files">
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f buildProject.php ${tempPath} onlySetup"/>
        </exec>
        <antcall target="compileLess" />
        <!--<antcall target="compressCss" />-->
        <!--<antcall target="compressJs" />-->
        <delete includeemptydirs="true">
            <fileset dir="${basedir}${tempPath}" includes="**/*.less"/>
            <fileset dir="${basedir}${tempPath}" includes="**/less.js"/>
            <fileset dir="${basedir}${tempPath}" includes="**/less-full.js"/>
            <fileset dir="${basedir}${tempPath}" includes="**/*.odt"/>
            <fileset dir="${basedir}${tempPath}" includes="**/setupproject.php"/>
            <fileset dir="${basedir}${tempPath}" includes="**/.git"/>
        </delete>
    </target>

    <target name="setupPackageFolders" description="deletes the temp-folders and creates the initial structure">
        <delete dir="${basedir}${tempPath}"/>
        <mkdir  dir="${basedir}${tempPath}"/>
    </target>

    <!-- triggers the installation of the project aka. creating the db-structure -->

    <!-- sqlite3 config file -->
    <target name="installProjectSqlite">
        <echo>Creating full Kajona installation</echo>
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f buildProject.php ${projectPath} false config_sqlite3.php"/>
        </exec>
    </target>

    <!-- mysql config file -->
    <target name="installProjectMysql">
        <echo>Creating full Kajona installation</echo>
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f buildProject.php ${projectPath} false config_mysql.php"/>
        </exec>
    </target>

    <!-- oracle config file -->
    <target name="installProjectOracle">
        <echo>Creating full Kajona installation</echo>
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f buildProject.php ${projectPath} false config_oracle.php"/>
        </exec>
    </target>

    <!-- postgres config file -->
    <target name="installProjectPostgres">
        <echo>Creating full Kajona installation</echo>
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f buildProject.php ${projectPath} false config_postgres.php"/>
        </exec>
    </target>




    <target name="cleanZipContent" description="Removes internal files used by the development not to be included into the build zips">
        <delete includeemptydirs="true">
            <fileset dir="${basedir}${tempPath}" includes="**/*.less"/>
            <fileset dir="${basedir}${tempPath}" includes="**/less.js"/>
            <fileset dir="${basedir}${tempPath}" includes="**/less-full.js"/>
            <fileset dir="${basedir}${tempPath}" includes="**/*.odt"/>
            <fileset dir="${basedir}${tempPath}" includes="**/core*/*/tests/**"/>
            <fileset dir="${basedir}${tempPath}" includes="**/core*/*/scripts/spec/**"/>
            <fileset dir="${basedir}${tempPath}" includes="**/setupproject.php"/>
            <fileset dir="${basedir}${tempPath}" includes="**/V4toV5Migration.php"/>
            <fileset dir="${basedir}${tempPath}" includes="**/.git"/>
            <fileset dir="${basedir}${tempPath}" includes="**/core/_buildfiles/jstests/selenium/**"/>
        </delete>
    </target>


    <target name="compileLess" description="Compiles the less files and inserts them into to tpl files">
        <echo>Compiling less files</echo>
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f lessc/v4setup.php "/>
        </exec>
    </target>



    <target name="compressCss" description="Minifies the css files using the cleancss compressor">
        <echo>Compressing css files</echo>

        <copy todir="${basedir}${tempPath}">
            <fileset dir="${basedir}${tempPath}">
                <include name="**/*.css"/>
            </fileset>
            <globmapper from="*.css" to="*-full.css"/>
        </copy>

        <apply executable="${basedir}${jsPath}/node_modules/.bin/cleancss${script-suffix-cmd}" parallel="false" dest="${basedir}${tempPath}" verbose="false" failonerror="true">
            <fileset dir="${basedir}${tempPath}" includes="**/*-full.css"/>
            <arg line="--output"/>
            <mapper type="glob" from="*-full.css" to="*.css"/>
            <targetfile/>
            <srcfile/>
        </apply>
    </target>


    <target name="compressJs" description="Minifies the js files using the uglifyjs compressor">
        <echo>Compressing js files</echo>

        <copy todir="${basedir}${tempPath}"> <!-- add verbose="true" to see the list of applied files -->
            <fileset dir="${basedir}${tempPath}">
                <include name="**/*.js"/>
                <exclude name="**/*min.js" />
                <exclude name="**/jquery*.js" />
                <exclude name="**/ckeditor/**/*.js" />
                <exclude name="core*/module_*/tests/**/*.js" />
                <exclude name="core*/*/scripts/spec/*.js" />
            </fileset>
            <globmapper from="*.js" to="*-full.js"/>
        </copy>

        <apply executable="${basedir}${jsPath}/node_modules/.bin/uglifyjs${script-suffix-cmd}" parallel="false" dest="${basedir}${tempPath}" verbose="false" failonerror="true">
            <fileset dir="${basedir}${tempPath}" includes="**/*-full.js"/>
            <srcfile/>
            <arg line="--compress"/>
            <arg line="--mangle"/>
            <arg line="--output"/>
            <mapper type="glob" from="*-full.js" to="*.js"/>
            <targetfile/>
        </apply>
    </target>


    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="${path.php}" failonerror="true">
            <arg value="-l" />

            <fileset dir="${basedir}${projectPath}">
                <include name="**/*.php" />
                <exclude name="**/vendor/**" />
                <modified />
            </fileset>
        </apply>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC">
        <exec executable="${path.phploc}">
            <arg line=" --exclude= */vendor/* --exclude ${basedir}${projectPath}/core/module_ezcchart/vendor --exclude ${basedir}${projectPath}/core/module_pchart/vendor --exclude ${basedir}${projectPath}/core/module_pdf/vendor --exclude ${basedir}${projectPath}/core/module_phpexcel/vendor --exclude ${basedir}${projectPath}/core/module_qrcode/vendor --exclude ${basedir}${projectPath}/core/module_system/vendor   "/>
            <arg value="--log-csv" />
            <arg value="${basedir}${buildPath}/logs/phploc.csv" />
            <arg path="${basedir}${projectPath}" />
        </exec>
    </target>

    <target name="pdepend" description="Calculate software metrics using PHP_Depend">
        <exec executable="${path.pdepend}">
            <arg value="--jdepend-xml=${basedir}${buildPath}/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${basedir}${buildPath}/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${basedir}${buildPath}/pdepend/overview-pyramid.svg" />
            <arg value="--ignore=*/vendor/*,${basedir}${projectPath}/core/module_ezcchart/vendor/,${basedir}${projectPath}/core/module_pchart/vendor,${basedir}${projectPath}/core/module_pdf/vendor,${basedir}${projectPath}/core/module_phpexcel/vendor,${basedir}${projectPath}/core/module_qrcode/vendor,${basedir}${projectPath}/core/module_system/vendor "/>
            <arg path="${basedir}${projectPath}" />
        </exec>
    </target>


    <target name="phpmd-ci" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec executable="${path.phpmd}">
            <arg path="${basedir}${projectPath}" />
            <arg value="xml" />
            <arg value="--exclude" />
            <arg value="*yui*,*tcpdf*,*fonts*,*pchart*,*vendor*,*phpexcel*,*phpqrcode*" />
            <arg value="--reportfile" />
            <arg value="${basedir}${buildPath}/logs/pmd.xml" />
            <arg value="${basedir}/phpmd-ruleset.xml" />
        </exec>
    </target>


    <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec executable="${path.phpcs}"  output="/dev/null" >
            <arg value="--tab-width=4" />
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${basedir}${buildPath}/logs/checkstyle.xml" />
            <arg value="--standard=${basedir}/phpcs-ruleset.xml" />
            <arg path="${basedir}${projectPath}" />
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec executable="${path.phpcpd}">
            <arg line=" --exclude= */vendor/* --exclude core/module_ezcchart/system/ezcomponents --exclude core/module_pchart/system/pchart --exclude tcpdf --exclude core/module_phpexcel/system/phpexcel --exclude core/module_qrcode/system/phpqrcode   "/>
            <arg value="--log-pmd" />
            <arg value="${basedir}${buildPath}/logs/pmd-cpd.xml" />
            <arg path="${basedir}${projectPath}" />
        </exec>
    </target>


    <target name="phpdox">
        <echo>Generating PHP API Docs</echo>
        <exec executable="${path.phpdox}" dir="${basedir}" taskname="phpdox">
            <arg line="-f ${basedir}/phpdox.xml" />
        </exec>
    </target>



    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec executable="${path.phpunit}" failonerror="true">
            <arg line="--configuration ${basedir}/phpunit.xml " />
            <!--<arg path="${basedir}${projectPath}" />-->
        </exec>
    </target>

    <target name="phpunitFast" description="Run unit tests with PHPUnit">
        <exec executable="${path.phpunit}" failonerror="true">
            <arg line="--configuration '${basedir}/phpunit_fast.xml' " />
            <!--<arg path="${basedir}${projectPath}" />-->
        </exec>
    </target>

    <!-- executes javascript jasmine tests -->
    <target name="jasmine">

        <!--currently disabled due to requirejs migration-->
        <exec dir="${basedir}${jsPath}" executable="${path.node}" failonerror="on">
            <arg line="./node_modules/jasmine/bin/jasmine.js"/>
        </exec>
    </target>


    <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
        <exec executable="${path.phpcb}">
            <arg value="--log" />
            <arg path="${basedir}${buildPath}/logs" />
            <arg value="--source" />
            <arg path="${basedir}${projectPath}" />
            <arg value="--output" />
            <arg path="${basedir}${buildPath}/code-browser" />
        </exec>
    </target>


</project>
